	IN
	STO	num
	IN
	STO	base
	
# S'assure que la base est valide (entre 2 et 9)
	SUB	ten	# acc = base - 10
	BRP	err	# base - 10 >= 0 ? throw Error : continue
	LDA	one	# acc = 1
	SUB	base	# acc = 1 - base
	BRP	err	# 1 - base >= 0 ? throw Error : continue
	
# Retourne 0 si le nombre est 0 en base 10
	LDA	num
	BRZ	zeroOut

# While num > 0
WHILE	LDA	minus
	STO	divCtr
	
# Modulo: result = num % base
	LDA	num
MODULO	STO	result
	LDA	result
	SUB	base
	BRP	MODULO
	LDA	result
	OUT
	# Save result in array

# Division: num = num // base
DIV	LDA	divCtr
	ADD	one
	STO	divCtr
	LDA	num
	SUB	base
	STO	num
	BRP	DIV

	LDA	divCtr
	STO	num
	BRZ	EXIT
	BRP	WHILE

# print array before exit...
EXIT	HLT


zeroOut	LDA	zero
	OUT
	HLT
	
err	LDA	error
	OUT
	HLT

# Variables
num	DAT	000
base	DAT	000
divCtr	DAT	000
result	DAT	000
# Constantes
minus	DAT	-1
zero	DAT	000
one	DAT	001
ten	DAT	010
# Error
error	DAT	499
exit	DAT	498
# Tableau
tab	DAT	010
	DAT	020
	DAT	030
	DAT	040
	DAT	050
	DAT	060
	DAT	070
	DAT	080
	DAT	090
